using Azure.Core;
using Microsoft.Extensions.Hosting;
using SpyFall_project.Models;
using System.IO;
using System.Net;
using System.Net.Sockets;

namespace SpyFall_project.Services
{
    public class ExploitMethods
    {
        /// <summary>
        /// Create a url from the host string and the port number
        /// </summary>
        /// <param name="host">the host IP address</param>
        /// <param name="port">the port number</param>
        /// <returns>a url string</returns>
        public async Task<string> ExploitHTTP(string host, int port)
        {
            string url = "http://" + host + ":" + port.ToString();
            return url;
        }

        /// <summary>
        /// Create a DNS request with the name and return a DNS pair with the IP address.
        /// </summary>
        /// <param name="Name">The name of the domain</param>
        /// <returns>Pair with name and IP address</returns>
        public async Task<DNSPair> ExploitDNS(string Name)
        {
            string host;
            using (StreamReader sr = new StreamReader("./Data/ip.txt"))
            {
                host = sr.ReadLine();
            }
            int port;
            using (StreamReader sr = new StreamReader("./Data/port.txt"))
            {
                port = int.Parse(sr.ReadLine());
            }

            //create the DNS query
            byte[] header_query = { 0xdb, 0x42, //id
                                    0x01, 0x00, //flags
                                    0x00, 0x01, //questions
                                    0x00, 0x00, //answers
                                    0x00, 0x00, //records
                                    0x00, 0x00}; //additional
            // db42 0100 0001 0000 0000 0000
            byte[] query = header_query;
            
            foreach (var word in Name.Split('.'))
            {
                byte[] len = { (byte)word.Length };
                byte[] cuv = System.Text.ASCIIEncoding.Default.GetBytes(word);
                query = query.Concat(len).ToArray();
                query = query.Concat(cuv).ToArray();
            }
            byte[] end_query = { 0x00, 0x00, 0x01, 0x00, 0x01 };
            query = query.Concat(end_query).ToArray();

            byte[] queryLength = BitConverter.GetBytes((ushort)query.Length);
            if (BitConverter.IsLittleEndian)
            {
                Array.Reverse(queryLength);
            }

            using (TcpClient client = new TcpClient())
            {
                await client.ConnectAsync(host, port);
                using (NetworkStream stream = client.GetStream())
                {
                    stream.Write(queryLength, 0, queryLength.Length);
                    stream.Write(query, 0, query.Length);

                    //response
                    byte[] length = new byte[2];
                    stream.Read(length, 0, length.Length);

                    byte[] response = new byte[4096];
                    int bytesRead = stream.Read(response, 0, response.Length);
                    //check the id if correct
                    if (response.Length > 0)
                    {
                        if (!(response[0] == 219 && response[1] == 66)) return null;
                        ushort flags = (ushort)((response[2] << 8) | response[3]);
                        // Check if the response is valid
                        if ((flags & 0x8000) != 0)
                        {
                            Console.WriteLine(flags);

                            if ((flags & 0x000F) != 0) return null;
                        }
                        //need to skip the question
                        //our answer starts at response[query.length]
                        //we need to skip the first 10 bytes
                        int iplen = response[query.Length + 10] * 256 + response[query.Length + 11];
                        for (int i = 0; i < bytesRead; ++i)
                        {
                            Console.WriteLine(response[i]);
                        }
                        Console.WriteLine("tip adresa" + iplen);
                        if (iplen != 4) //adresa nu este IPv4
                        {
                            return null;
                        }
                        string address = response[query.Length + 12].ToString() + "." +
                                         response[query.Length + 13].ToString() + "." +
                                         response[query.Length + 14].ToString() + "." +
                                         response[query.Length + 15].ToString();
                        Console.WriteLine(address);
                        return new DNSPair
                        {
                            IpAddress = IPAddress.Parse(address),
                            Name = Name
                        };
                    }

                }
            }
            
            return null;
        }
        
    }
}
